import{_ as s,o as a,c as o,k as e,a as t,R as i}from"./chunks/framework.QTPdkqON.js";const n="/tech-support-wiki/assets/ssh-1.KJPoVQqm.png",r="/tech-support-wiki/assets/ssh-2.OUS3tfnx.png",l="/tech-support-wiki/assets/ssh-3.eNZt3jY8.png",_=JSON.parse('{"title":"multiple git accounts on windows with ssh","description":"","frontmatter":{"title":"multiple git accounts on windows with ssh","author":"John Curry and KraXen72"},"headers":[],"relativePath":"git/set-up-multiple-accounts-with-ssh-windows.md","filePath":"git/set-up-multiple-accounts-with-ssh-windows.md","lastUpdated":1705790236000}'),h={name:"git/set-up-multiple-accounts-with-ssh-windows.md"},p=e("h1",{id:"multiple-git-accounts-on-windows-with-ssh",tabindex:"-1"},[t("multiple git accounts on windows with ssh "),e("a",{class:"header-anchor",href:"#multiple-git-accounts-on-windows-with-ssh","aria-label":'Permalink to "multiple git accounts on windows with ssh"'},"​")],-1),c=e("ul",null,[e("li",null,[t("see video: "),e("a",{href:"https://www.youtube.com/watch?v=ap56ivm0dhw",target:"_blank",rel:"noreferrer"},"https://www.youtube.com/watch?v=ap56ivm0dhw")]),e("li",null,[t("this is from web-archive url of "),e("a",{href:"https://truthseekers.io/multiple-github-accounts-on-one-computer/",target:"_blank",rel:"noreferrer"},"https://truthseekers.io/multiple-github-accounts-on-one-computer/"),e("ul",null,[e("li",null,"I edited the article and added more info")])])],-1),u=e("iframe",{src:"https://www.youtube-nocookie.com/embed/ap56ivm0dhw?rel=0&autoplay=0&showinfo=0&enablejsapi=0",frameborder:"0",loading:"lazy",gesture:"media",allow:"autoplay; fullscreen",allowautoplay:"true",allowfullscreen:"true",width:"728",height:"409"},null,-1),d=i(`<p>In this tutorial we’re going to setup multiple GitHub accounts on the same computer with SSH. This is useful if you have a work account and a personal account, or any other time you have multiple GitHub accounts that you’re using on the same machine.</p><p>Assuming you don’t have ANY ssh keys setup for git, the steps are the following:</p><ol><li>Create SSH key (id_rsa is standard name)</li><li>Add SSH key to primary GitHub account</li><li>Add SSH key to SSH-Agent</li><li>Create secondary SSH key (id_rsa_other_account)</li><li>Add secondary SSH key to other GitHub account</li><li>Add secondary SSH key to SSH-Agent</li><li>Add both keys to a “config” file located in the .ssh/ folder</li><li>Change Git repository user &amp; email</li><li>Test!</li></ol><p>If you already have an SSH key (id_rsa) and it’s added to SSH-Agent, then you can just skip the first 3 steps. That looks like a lot of steps but they’re pretty simple to follow along with. Let’s begin.</p><h2 id="create-ssh-key" tabindex="-1">Create SSH Key <a class="header-anchor" href="#create-ssh-key" aria-label="Permalink to &quot;Create SSH Key&quot;">​</a></h2><p>Run the command <code>$ ssh-keygen -t rsa -C &quot;youremail@email.com&quot;</code> to create your SSH key. <strong>-t</strong> is the “type” flag, which we set to <strong>rsa</strong>, and <strong>-C</strong> is for comment. See <a href="https://web.archive.org/web/20220121175806/http://man.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/ssh-keygen.1?query=ssh-keygen&amp;sec=1" target="_blank" rel="noreferrer">OpenBSD manual</a>.</p><p>You’ll get something like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Generating public/private rsa key pair.</span></span>
<span class="line"><span>Enter file in which to save the key (/Users/john/.ssh/id_rsa):     #### This is *Nix flavored machines</span></span>
<span class="line"><span>Enter file in which to save the key (C:\\Users\\John/.ssh/id_rsa):   #### Poor souls on Windows</span></span></code></pre></div><p>Note: If you already have an id_rsa and id_rsa.pub file, note that this command will overwrite the existing id_rsa files and will mess up anything currently using that key. See below when we create our second SSH key.</p><p><strong>I left the passphrase empty</strong> when prompted for one. You can also generate a new passphrase (5 words) in your password manager and use that.</p><p>Now check to make sure you have an id_rsa and id_rsa.pub file in your \\Users\\youruser\\.ssh\\ directory. If so, you’re ready to add the public key to GitHub</p><h2 id="add-ssh-key-to-github" tabindex="-1">Add SSH Key to GitHub <a class="header-anchor" href="#add-ssh-key-to-github" aria-label="Permalink to &quot;Add SSH Key to GitHub&quot;">​</a></h2><p>Login to your main GitHub account. If you go into your \\Users\\youruser\\.ssh\\ folder you can copy the entire contents of the id_rsa.pub file and paste it into the key field as seen below. The title can be used to describe the machine. Something like “Desktop Computer home” or “Office space 27 xyz co” would be good.</p><p><img src="`+n+`" alt=""></p><h2 id="add-ssh-key-to-ssh-agent" tabindex="-1">Add SSH Key to SSH-Agent <a class="header-anchor" href="#add-ssh-key-to-ssh-agent" aria-label="Permalink to &quot;Add SSH Key to SSH-Agent&quot;">​</a></h2><p>An SSH-Agent is something the client (your computer) uses to “sign” a message that gets forwarded back to the server. The server looks at the signature from the SSH-Agent and sees if it matches the private key. You can read more about <a href="https://smallstep.com/blog/ssh-agent-explained/" target="_blank" rel="noreferrer">SSH-Agent here</a>.</p><p>run <code>$ ssh-add \\path\\to/.ssh/id_rsa</code> in your terminal. If you have problems, you may need to setup your ssh-agent. I don’t think there’s problems on *Nix machines, but Windows users can see the below troubleshooting steps if you run into issues. Your mileage may vary.</p><h3 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h3><h4 id="enabling-openssh-client" tabindex="-1">Enabling OpenSSH Client <a class="header-anchor" href="#enabling-openssh-client" aria-label="Permalink to &quot;Enabling OpenSSH Client&quot;">​</a></h4><p>Windows users may need to verify ssh-add actually works and an ssh-agent is installed. Here’s a <a href="https://stackoverflow.com/questions/18683092/how-to-run-ssh-add-on-windows" target="_blank" rel="noreferrer">stackoverflow post that helped me</a>. (See tamj0rd2’s answer and the 2019 solution)</p><p>Make sure OpenSSH is installed and started</p><ol><li>Start Menu</li><li>Search “Manage optional features”</li><li>Make sure “Open SSH Client” is in the list. If not, figure out how to add it.</li><li>Open “Services” from start menu</li><li>Scroll down to “OpenSSH Authentication Agent” and right-click “properties”.</li><li>Change startup type from “disabled” to <strong>“Automatic (Delayed Start)”</strong> so the SSH-Agent is turned on automatically after booting.</li><li>Click the <code>Start</code> button to start the service</li></ol><p>At this point <strong>you may want to test this ssh key works</strong> by creating a remote repository and pushing a commit from your local computer. I’ll save that until the end to save time.</p><h4 id="setting-permissions-for-id-rsa-file" tabindex="-1">Setting permissions for id_rsa file <a class="header-anchor" href="#setting-permissions-for-id-rsa-file" aria-label="Permalink to &quot;Setting permissions for id_rsa file&quot;">​</a></h4><p>You may see this message:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span></span>
<span class="line"><span>@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span></span>
<span class="line"><span>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span></span>
<span class="line"><span>Permissions for &#39;id_rsa&#39; are too open.</span></span>
<span class="line"><span>It is required that your private key files are NOT accessible by others.</span></span>
<span class="line"><span>This private key will be ignored.</span></span></code></pre></div><p>In that case, do the following:</p><ul><li>You locate the file in Windows Explorer, right-click on it then select &quot;Properties&quot;.</li><li>Navigate to the &quot;Security&quot; tab and click &quot;Advanced&quot;.</li><li>Click <code>Disable Inheritance</code> and <code>Convert inherited premissions into explicit permissions on this object</code></li><li>Delete all permisions except for your account you are currently using</li><li>On the top, if <code>Owner: </code> is not your account, change it to your account.</li><li>Then grant yourself &quot;Full control&quot;</li><li>Hit <code>Apply</code> and <code>Save</code></li></ul><p>source and more info: <a href="https://superuser.com/questions/1296024/windows-ssh-permissions-for-private-key-are-too-open" target="_blank" rel="noreferrer">SuperUser</a></p><h4 id="bad-owner-or-permissions-on-c-users-user-ssh-config" tabindex="-1">Bad Owner or Permissions on C:/Users/User/.ssh/config <a class="header-anchor" href="#bad-owner-or-permissions-on-c-users-user-ssh-config" aria-label="Permalink to &quot;Bad Owner or Permissions on C:/Users/User/.ssh/config&quot;">​</a></h4><p>Do the same thing as above for <code>C:/Users/User/.ssh/config</code></p><h4 id="other" tabindex="-1">Other <a class="header-anchor" href="#other" aria-label="Permalink to &quot;Other&quot;">​</a></h4><p>Try doing the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git config user.name &quot;John C&quot;</span></span>
<span class="line"><span>git config user.email &quot;other@email.com&quot;</span></span></code></pre></div><h2 id="rinse-repeat-for-steps-4-5-6" tabindex="-1">Rinse &amp; Repeat for Steps 4, 5, 6 <a class="header-anchor" href="#rinse-repeat-for-steps-4-5-6" aria-label="Permalink to &quot;Rinse &amp; Repeat for Steps 4, 5, 6&quot;">​</a></h2><p>Now do the same thing for your other id_rsa key with your other email, but <strong>add an identifier at the end of the key</strong>! Make sure you add the filename including the path to your .ssh/ folder.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ ssh-keygen -t rsa -C &quot;yourOTHERemail@email.com&quot;    ## you&#39;ll receive terminal output</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Enter file in which to save the key (C:\\Users\\John\\.ssh/id_rsa): C:\\Users\\John/.ssh/id_rsa_other_account</span></span></code></pre></div><p>Now <strong>go check in .ssh/</strong> and you should see the id_rsa_other_account and id_rsa_other_account.pub files AND the original id_rsa and id_rsa.pub files.</p><p>Add the id_rsa_other_account to your OTHER GitHub account’s SSH keys like we did above. (see Github screenshot)</p><p>Now add the second SSH key into the SSH-Agent with:</p><p><code>$ ssh-add \\path\\to\\.ssh\\id_rsa_other_account</code></p><h2 id="create-ssh-config-file" tabindex="-1">Create SSH config file <a class="header-anchor" href="#create-ssh-config-file" aria-label="Permalink to &quot;Create SSH config file&quot;">​</a></h2><p>Create the config file located in .ssh/ It doesn’t exist by default so you’ll have to create it. <strong>/Users/John/.ssh/config</strong> (no extension on config)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Main account</span></span>
<span class="line"><span>Host github.com</span></span>
<span class="line"><span>   HostName github.com</span></span>
<span class="line"><span>   User git</span></span>
<span class="line"><span>   IdentityFile ~/.ssh/id_rsa</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Alt</span></span>
<span class="line"><span>Host github-alt</span></span>
<span class="line"><span>   HostName github.com</span></span>
<span class="line"><span>   User git</span></span>
<span class="line"><span>   IdentityFile ~/.ssh/id_rsa_other</span></span></code></pre></div><h2 id="test-your-multiple-github-account-setup" tabindex="-1">Test your multiple GitHub account setup! <a class="header-anchor" href="#test-your-multiple-github-account-setup" aria-label="Permalink to &quot;Test your multiple GitHub account setup!&quot;">​</a></h2><p>We’re only going to bother with the “other” account, since you’ve most likely been using the one-account setup for a while and already know that part.</p><h3 id="create-a-github-repository-and-get-to-the-instructions-for-setting-up-the-repo-locally" tabindex="-1">Create a GitHub repository and get to the “instructions” for setting up the repo locally. <a class="header-anchor" href="#create-a-github-repository-and-get-to-the-instructions-for-setting-up-the-repo-locally" aria-label="Permalink to &quot;Create a GitHub repository and get to the “instructions” for setting up the repo locally.&quot;">​</a></h3><p><img src="`+r+`" alt=""></p><p>Now you’ll need to replace the “host” portion of the remote add origin string with the “Host” from the config file. If you look at the previous part of the post, you’ll see that the .ssh/id_rsa_other_account is attached to the <code>Host github-other</code> and the <code>id_rsa_other_account.pub</code> goes to my secondary GitHub account. If I want to push to that GitHub account I need to run the git remote add command like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote add origin git@github-other:fastpenguin91/testotheraccount.git</span></span></code></pre></div><p>After this, commit like normal, assuming you have a change to commit:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git add .</span></span>
<span class="line"><span>git commit -m &quot;testing 2nd acct&quot;</span></span>
<span class="line"><span>git push origin master</span></span></code></pre></div><p><img src="`+l+'" alt=""></p><p>Should work!</p><h2 id="using-alongside-https" tabindex="-1">Using alongside HTTPS <a class="header-anchor" href="#using-alongside-https" aria-label="Permalink to &quot;Using alongside HTTPS&quot;">​</a></h2><p>You can set up your main account only in GCM (credential-manager) and use SSH alongside HTTPS for git operations. Git will know which one to use based on the url you provide. This is useful, if for example you:</p><ul><li>only have one gitlab accout but 2 github ones: use SSH for github, but HTTPS for gitlab</li><li>want to always use HTTPS for main account, and ssh for either</li></ul><h2 id="using-ssh-with-git" tabindex="-1">Using SSH with GIT <a class="header-anchor" href="#using-ssh-with-git" aria-label="Permalink to &quot;Using SSH with GIT&quot;">​</a></h2><h3 id="cloning-a-repo-with-ssh" tabindex="-1">Cloning a repo with SSH <a class="header-anchor" href="#cloning-a-repo-with-ssh" aria-label="Permalink to &quot;Cloning a repo with SSH&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git clone git@github.com:username/repo.git</span></span></code></pre></div><h3 id="adding-a-remote-from-blank-repo-to-use-ssh" tabindex="-1">Adding a remote from blank repo to use SSH <a class="header-anchor" href="#adding-a-remote-from-blank-repo-to-use-ssh" aria-label="Permalink to &quot;Adding a remote from blank repo to use SSH&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote add origin git@github.com:username/repo.git</span></span></code></pre></div><h3 id="updating-an-existing-repository-to-use-ssh" tabindex="-1">Updating an existing repository to use SSH <a class="header-anchor" href="#updating-an-existing-repository-to-use-ssh" aria-label="Permalink to &quot;Updating an existing repository to use SSH&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote set-url origin git@github.com:username/repo.git</span></span></code></pre></div>',64),g=[p,c,u,d];function m(b,y,f,k,w,S){return a(),o("div",null,g)}const H=s(h,[["render",m]]);export{_ as __pageData,H as default};
