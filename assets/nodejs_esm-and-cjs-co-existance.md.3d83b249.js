import{_ as s,c as e,o as n,a}from"./app.505a00ec.js";const o="/tech-support-wiki/esm_and_cjs_coexistence-pic.png",F=JSON.parse('{"title":"esm and cjs co-existance","description":"","frontmatter":{"title":"esm and cjs co-existance"},"headers":[],"relativePath":"nodejs/esm-and-cjs-co-existance.md"}'),t={name:"nodejs/esm-and-cjs-co-existance.md"},l=a('<h1 id="esm-and-cjs-co-existance" tabindex="-1">esm and cjs co-existance <a class="header-anchor" href="#esm-and-cjs-co-existance" aria-hidden="true">#</a></h1><p><a href="https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1" target="_blank" rel="noreferrer">https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1</a></p><ul><li>so like electron needs it&#39;s stuff in <em>commonjs</em></li><li>most of my electron apps already use utils.js as a commonjs module</li><li>svelte needs it&#39;s stuff in <em>esm</em></li></ul><ol><li>the way i&#39;ve solved it i put general (not requiring node modules) utils in a separate esm module (in subfolder) like this: <img src="'+o+`" alt="esm and cjs"></li></ol><ul><li>the subfolder&#39;s <code>package.json</code> has this: <code>{&quot;type&quot;: &quot;module&quot;}</code> so its an esm module</li><li>all functions in (esm) lib.js are exported like this: <code>export function shortenFilename(){...}</code></li></ul><ol><li>the <code>utils.js</code> imports all the lib&#39;s functions with standard named imports and require, and exports them using <code>module.exports = { namedExports }</code></li><li>the main <code>package.json</code> has this added for it to work:<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	...</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./utils.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">import</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./esm/lib.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ol><p>to see the whole lib and more detaills, check this: <a href="https://github.com/KraXen72/roseboxlib" target="_blank" rel="noreferrer">https://github.com/KraXen72/roseboxlib</a></p>`,7),c=[l];function p(i,r,d,m,u,D){return n(),e("div",null,c)}const y=s(t,[["render",p]]);export{F as __pageData,y as default};
