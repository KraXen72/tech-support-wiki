import{_ as s,c as e,o as i,a4 as t,a7 as a}from"./chunks/framework.FwfRAdxb.js";const g=JSON.parse('{"title":"esm and cjs co-existance","description":"","frontmatter":{"title":"esm and cjs co-existance"},"headers":[],"relativePath":"nodejs/esm-and-cjs-co-existence.md","filePath":"nodejs/esm-and-cjs-co-existence.md","lastUpdated":1703609043000}'),n={name:"nodejs/esm-and-cjs-co-existence.md"},o=t('<h1 id="esm-and-cjs-co-existence" tabindex="-1">esm and cjs co-existence <a class="header-anchor" href="#esm-and-cjs-co-existence" aria-label="Permalink to &quot;esm and cjs co-existence&quot;">â€‹</a></h1><p><a href="https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1" target="_blank" rel="noreferrer">https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1</a></p><ul><li>so like electron needs it&#39;s stuff in <em>commonjs</em></li><li>most of my electron apps already use utils.js as a commonjs module</li><li>svelte needs it&#39;s stuff in <em>esm</em></li></ul><ol><li>the way i&#39;ve solved it i put general (not requiring node modules) utils in a separate esm module (in subfolder) like this: <img src="'+a+`" alt="esm and cjs"></li></ol><ul><li>the subfolder&#39;s <code>package.json</code> has this: <code>{&quot;type&quot;: &quot;module&quot;}</code> so its an esm module</li><li>all functions in (esm) lib.js are exported like this: <code>export function shortenFilename(){...}</code></li></ul><ol><li>the <code>utils.js</code> imports all the lib&#39;s functions with standard named imports and require, and exports them using <code>module.exports = { namedExports }</code></li><li>the main <code>package.json</code> has this added for it to work:<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">	...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./utils.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./esm/lib.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>to see the whole lib and more detaills, check this: <a href="https://github.com/KraXen72/roseboxlib" target="_blank" rel="noreferrer">https://github.com/KraXen72/roseboxlib</a></p>`,7),l=[o];function d(c,r,h,p,m,u){return i(),e("div",null,l)}const E=s(n,[["render",d]]);export{g as __pageData,E as default};
